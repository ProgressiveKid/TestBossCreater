<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIACGEgAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFv
        ck5UAc+id5oAABJASURBVHja7Z3Nb1TXGcavbG9IIlYtCiSYGObDKIrxzJ2ZO2O7AiJl0T8hLJL8KQRI
        1DVEMiDKAolFdjXZkEC2iZRdiVQhBpy2jmlX2RWUKKr7vmfOpIOxPeP7ee69v0d6RTat4Dzv85t7zz0f
        nocQQgghhBBCCCGEEEIIIYQi6MTCkjdbP+1VG12v1qReKH9Q1WbPe+vUH71K4w80DMq/6svLXrXaeqHZ
        jy8EU/LnQWn4Q/LnEak3S15HzFj43YMnFpem/j9WAoPlRe/tt8/QSCh/mveXvVqjJ2WaeUaauir1kdQV
        qS+lHkj9ILVR8vrBjsWXdmw+1LGqN5dmzJNBI/BOdngiQDlRze95VSn9BasvLE1LM3elPpN6LPWL1Ba1
        Z/1ix0rGrNetNjozdRnL2qmWV5cnA4TcDX8zEAAE5ldLGvgNqU+lNgl16Hoq9Sd5inqjKuGv6/hKIeRk
        +OXXSpp0ScPfkbov9V9CHLl0DL/WMa22lswYV4EAcmqyT37x69KYNX9JH1PP2ndawhtvfV/TsW0t/TZJ
        iJAbE37vNO17v/nl/56wJgqBzuBpa4nGQ9nrpL/smUmqwTv/14Q08bpfawT6+dSbbwEBlKEWFhbk0b/r
        nTxlZvs/5Z0/tTmBT2qN1rROtrJOAGWmo+2z5l3Ufupjtj+90rEOdDJwbrlBI6KMZv71c99iMGO/8xPM
        dOvKfHNlRr+6IJS6dG2/XbZatQtXCGW6JWPeqwz2Evg0JEpXurHHAuAjVvhlUj/XmsEH6kE9qNCQKF3p
        rr4Tg409VwhjZnVZfDAbiBBK9/1/sOz3oN3EQhizqbtmZyUAQBntt/89q/4yrb/W/O7vOK+gpMp4v73+
        f/tS/4zQwL/aDS9l3Qr81I5B2PH7h/UgWZ85r8A9ObLfPmoD6/++XdKDQY7Yf/tTxwHKeQVOvXsXa7/9
        hg1CKY8CqzaCN+wYcF4BmnjirUj77Tfsr2EpvRQAHM0hADivILuGKdx++9ICoCqPzxW/pwD4kfMK0N6T
        fcXdb1/eJwAzs14IAHBeQeITfsXdb19aAOj7ct3vFgkAnFeQhAq+377EcwD6ztydLRgAOK8gTpVgv33J
        ARAUEQCcVxCXSrDfvtQAqDUK+QTAeQWxNUnx99uXGAC6iKt3rKAA4LyCqCrJfvtSfwWo+oUGAOcVRFFJ
        9tuXHADdIgOA8wqiqCT77cu7EEiXAjcLDQDOK4j2jliK/fblngRsBm8V/DBVziuI1iBmS++DggOgtJuB
        6o1gtuBPAA/stnQCHRIAGo51h7eLsh042nbgntS/C+zv+hDwKBwA3oy4WyzJgHEgSPT6l8MHgsRxXkFp
        X/FcAUDSj9gcCVbsI8GOxNB/ACBjACRiAIeCFnuSzfX+AwAZG6CfKY9zLLgDn9mCKQAAAFI3wCxU8s3f
        8UMuBslqoU03sYU2AAAA7CmuBnNhqW03saW2AAAAjP876klFXA6a3WYbvzdT97ul7T8AkLEBs+13zWUR
        XA+eeunioUBfweZWTgEAAJCNAXpgif5/V5q9aXMIRPEOLHH1wI1LJ1pL0wrfpA7cAAAAYCLVW8tmb3t1
        8M34HgFNvO7VGjrWPa/eXil9/wEABww4utg2h1zalWMsDEr20M22zr1UEj5vDwAAgIlVMVtbO16ttaJP
        AmeAQELh97tn9XToup4Q7ffoPwDgjgEKgEqj4500t8OYJ4F7zAnE9s5/fzCmKzK2nVSu4AIAACAEBMyE
        oN3qauYELuT86isXZvsv1Qc39Erw9XKYDv0HANw1wBxjvmhOvPXm2p2pqn6uGiwXfmxXrxHs8Sv8+nbM
        OtVmb1rvhai/0zQ3RNF/ACAXBujdd+bYKz/w5hvLM4NVa+aMuMt2E8sDu198o+S1bsfirh0bHaPKSb89
        Mzg5WC/YWKb/AED+DNBv1HNLi8ObjeyV2N0paeqD0tyHSnoQyA777nuHqrqrz+9N/XZaUDPwjgVnzVoL
        +g8A5N4AXa+um1bshRjDC08oe5Fm1f734nsL3nynQ/8BAAxA9B8GYACi/zAAAxD9hwEYgOg/DMAARP9h
        AAYg+g8DMADRfxiAAYj+wwAMQPQfBmAAov8wAAMQ/YcBDCii/zAAIfoPAxCi/zAgD/Kv/e2FQvQfBpTE
        gPb1R17n9rde++pjqXWpvilE/2FAwQ3Q8Ac3H3otCXzrWn9O/jwn4X8NCNB/GFBwA7aF/5j8uSb1H6mL
        Ev5XgAD9hwEFNWCH8P9FasvWc6kLQID+w4ACGjAm/ECA/sOAohowYfiBAP2HAUUzYJ/hBwL0HwZkZUDc
        3+X9axL6G4/2G/4dIdACAgAAA5IzoLXaN9Ve1W/yT7zOrYfy6/0k0i+/hr8dLvwvQmC1f4AnAQCAAQkZ
        MAy/1KsSuPclsMf1F7fz57+HgsAun/q2QtYzqY95HQAAGJCAASPhPyBBO2+/yX/Ruvb4rTAQCPnOz5wA
        AMCAtA3YIfzPRkL3GwSCCSGQUPhHIXBxuGKQvQMAAAMiGDAm/MO6I0Ge6Ekg5sf+vV4HzuneAQAAADAg
        pAEThn8EAnu/DiT8y7/14lNJ/7hOUu4FgLJdQAoAAEBS4X/pdWA7BNINv/073Ho4CQCmpQ4X+Orxw/bf
        CAAAQKLh3xUCmYR/gvkIO74akO+kNu1YFak27b/tMAAAAGmEf8eJQRfDv218NyOMr+u1GTaAAKBkAIgp
        /C8F0sXwxzi+rtcGAAAAYw2IOfyjwTwm4Z91LfwAAAAAACudKBtZ4RdX+If1ldTdhMJ/J2z4AQAAAAAj
        ANC1/WZ572CF31YOyqw90LMCWzeehFqKDAAAAAAYAkCDNDh3by0H4TeP/fp3blzvm92EGY4vAAAA+QdA
        5/Y3aUzWxfrOr7/8YcMPAAAAABhRit/qM5nwAwAAAACMkeMQiDX8AAAAAID8QCD28AMAAAAA8gGBRMIP
        AAAAAHAfAomFHwAAAADgNgQSDT8AAAAAwF0IJB7+bePLZiAAAAAcgUAq4R8ZX7YDAwAA4AgEUgv/yPhy
        IAgAAAAOQCDV8I+ML0eCAQAAkDEEUg8/AgAY4AYECD/9h/JmQEwQIPz0H8qrAREhQPjpP5R3A0JCgPDT
        f6goBuwTAoSf/kNFM2BCCBB++g8V1YAxECD89B8qugG7QGBNwj9H+Ok/VAIDtkHgdS3/6iPCT/+hshig
        EDi/ddMb3gx0+vOfCD/9hzAA0X8IAxD9hzAA0X8IA/aUXlwyWoj+w4CSGKCTiZ3b35qry9pX16X6phD9
        hwEFN2Db50RdR3BOwv8aEKD/MKDgBuywoGjN3lx8UcL/ChCg/zCgoAaMWVL8XOoCEKD/MKCABky4qQgI
        0H8YUDQD9rmtGAjQfxhQFANCHiwCBOg/DEjbgLi/y/vXJPQ3HoU9WuwFCLSAAADAgOQMaK32TbVX9Zv8
        E69z62GkTT76y6/hb0c7XHQAgdX+AZ4EAAAGJGTAMPxSr0rg3pfAHo+yx3+XT31hjxd/JvUxrwMAAAMS
        MGAk/AckaOftN/nQp/wkdMEIcwIAAAPiNmCH8D/b6aivYEIIJHzF2HO7WMisGGTvAADAgAgGjAn/sO5I
        kCd6Eoj5sX+v14FzuncAAAAADAhpwIThH4HA3q8DKV4z/oXOT+gk5V4A4HJQAAAA4gn/2JN/0w2//Tvc
        ejgJALgeHAAAgBjCvysEMgn/BPMRdnw1IN9JbdqxKlJt2n/bYQAAANII/44Tgy6Gf9v4bkYYX9drM2wA
        AUDJABBT+F8KpIvhj3F8Xa8NAAAAxhoQc/hHg3lMwj/rWvgBAAAAAFY6UTaywi+u8A/rK6m7CYX/TpTr
        xgAAAAAAFgC6tt8s7x2s8NvKQZm1B3pWYOvGk1BLkQEAAAAAQwBokAbn7q3lIPzmsV//zo3rfbObMMPx
        BQAAIP8A6Nz+Jo3Juljf+fWXP2z4AQAAAAAjSvFbfSYTfgAAAACAMXIcArGGHwAAAACQHwjEHn4AAAAA
        QD4gkEj4AQAAAADuQyCx8AMAAAAA3IZAouEHAAAAALgLgcTDv2182QwEAACAIxBIJfwj48t2YAAAAByB
        QGrhHxlfDgQBAADAAQikGv6R8eVIMAAAADKGQOrhRwAAA9yAAOGn/1DeDIgJAoSf/kN5NSAiBAg//Yfy
        bkBICBB++g8VxYB9QoDw03+oaAZMCAHCT/+hohowBgKEn/5DRTdgFwisSfjnCD/9h0pgwDYIvK7lX31E
        +Ok/VBYDFALnt256w5uBTn/+E+Gn/xAGIPoPYQCi/xAGIPoPYcCe0otLRgvRfxhQEgN0MrFz+1tzdVn7
        6rpU3xSi/zCg4AZs+5yo6wjOSfhfAwL0HwYU3IAdFhSt2ZuLL0r4XwEC9B8GFNSAMUuKn0tdAAL0HwYU
        0IAJNxUBAfoPA4pmwD63FQMB+g8DimJAyINFgAD9hwFpGxD3d3n/moT+xqOwR4u9AIEWEAAAGJCcAa3V
        vqn2qn6Tf+J1bj2MtMlHf/k1/O1oh4sOILDaP8CTAADAgIQMGIZf6lUJ3PsS2ONR9vjv8qkv7PHiz6Q+
        5nUAAGBAAgaMhP+ABO28/SYf+pSfhC4YYU4AAGBA3AbsEP5nOx31FUwIgYSvGHtuFwuZFYPsHQAAGBDB
        gDHhH9YdCfJETwIxP/bv9TpwTvcOAAAAgAEhDZgw/CMQ2Pt1IMVrxr/Q+QmdpNwLAFwOCgAAQDzhH3vy
        b7rht3+HWw8nAQDXgwMAABBD+HeFQCbhn2A+wo6vBuQ7qU07VkWqTftvOwwAAEAa4d9xYtDF8G8b380I
        4+t6bYYNIAAoGQBiCv9LgXQx/DGOr+u1AQAAwFgDYg7/aDCPSfhnXQs/AAAAAMBKJ8pGVvjFFf5hfSV1
        N6Hw34ly3RgAAAAAwAJA1/ab5b2DFX5bOSiz9kDPCmzdeBJqKTIAAAAAYAgADdLg3L21HITfPPbr37lx
        vW92E2Y4vgAAAOQfAJ3b36QxWRfrO7/+8ocNPwAAAABgRCl+q89kwg8AAAAAMEaOQyDW8AMAAAAA8gOB
        2MMPAAAAAMgHBBIJPwAAAADAfQgkFn4AAAAAgNsQSDT8AAAAAAB3IZB4+LeNL5uBAAAAcAQCqYR/ZHzZ
        DgwAAIAjEEgt/CPjy4EgAAAAOACBVMM/Mr4cCQYAAEDGEEg9/AgAYIAbECD89B/KmwExQYDw038orwZE
        hADhp/9Q3g0ICQHCT/+hohiwTwgQfvoPFc2ACSFA+Ok/VFQDxkCA8NN/qOgG7AKBNQn/HOGn/1AJDNgG
        gde1/KuPCD/9h8pigELg/NZNb3gz0OnPfyL89B/CAET/IQxA9B/CAET/IQxA9B/CAET/IQxA9B/CAET/
        YQAGIPoPAzAA0X8YgAGI/sMADED0HwZgAKL/MAADEP2HARiA6D8MwABE/2EABiD6DwMwANF/GHCkbBdh
        UrHVEQCQbwA8lWpbI9+kqH3UEds7TwFAdgBQE9YjGPCrNXCDokLUU9tDYftvffgEisIB4JDUgwgGUFSW
        9aDmmx4m0PsHQODV/OCgDN6XNBKV07ordRAAhFC10fWOLwRTMnhXaCQqp3W52jA9TKD3q9n6aXkCMK8B
        H0r9QjNROaufpT7Q8NeDCoHer04sLA3nAapSj2koKmelPVsxPez7BDrUPEAj8OqLwYwM4mc0FJWzujLv
        92bqPo//4V8D2u961WZPnwK6Ups0FZWT+lEq0FfYuZVTBDmsFhYWzGtApdmblj8/kfovzUU5Xtqjl060
        lqb1x+vtt88Q5Ciqt5YFAj15EjALKu7RYJTjda/W0F7tefX2CgGOQ0cX2159MCHYZmEQ5XB9b3q0EXiV
        1hLBjUsVCX+12fFqrRV9EjgDBCgnw+93z1Z9+eWXqkmhOBcGCQAqjY53UlcIDp4E7jEnQDnyzn9/0JMr
        0psd87SKEoGAmRA0E4N1857VvRBxtyBFRZ3tv1TX+SlfelKfUv0OQU10UrDR9U4udr2a/DnX7kxV9XPL
        YLnwY7v6isakkl7h17c916k2e9N1nfB7pym9GRDQ1J4G/K55Iqj6gTffWJ4ZrLoKdOnlZbsJ44Hdjsm2
        VipKrdteumt7S3usctJvz+hMv/4QzbeWCWQW0m+sc0uLXt2+FmhVG90pMeWgmHOIg0CoeA4G6R2q6q4+
        vzc17LN6M/COBWfNWhXkwrJh3zebLoxBja5ZO8CRVlQ8ZdahmP9efG/Bm+/wno8QQgghhBBCCCGEEEII
        Idf1P0f3v2q3s2zjAAAAAElFTkSuQmCC
</value>
  </data>
</root>